} else {
cat(paste0("     Dados de valor-t para '", vi_nome, "' não numéricos ou NULL.\n"))
}
} else {
cat(paste0("\nResumo para 'Valor-t Local de ", vi_desc, "': Coluna '", tval_vi_col_nome, "' não encontrada.\n"))
}
}
local_r2_col_name <- if ("Local_R2_plot" %in% names(resultados_gwr_poligonos_sf)) "Local_R2_plot" else "Local_R2"
if (local_r2_col_name %in% names(resultados_gwr_poligonos_sf)) {
print_summary_stats(resultados_gwr_poligonos_sf[[local_r2_col_name]], paste0("R² Local (usando '", local_r2_col_name, "')"))
cat(paste0("  -> Proporção da variância de '", var_dependente_formula_nome, "' explicada localmente. Variação indica não estacionariedade no ajuste.\n"))
if("Local_R2" %in% names(resultados_gwr_poligonos_sf) && any(resultados_gwr_poligonos_sf$Local_R2 < 0, na.rm=TRUE)){
cat("     Nota: Valores de R² Local originais < 0 indicam ajuste local pior que a média. Podem ter sido ajustados para visualização (no Bloco 9).\n")
}
} else {
cat("\nResumo Estatístico para 'R² Local': Coluna 'Local_R2' ou 'Local_R2_plot' não encontrada.\n")
}
# Seção 4: Inferência e Conclusões Preliminares (para variáveis transformadas log1p)
cat("\n## 4. Inferência e Conclusões Preliminares (para variáveis transformadas log1p) ##\n")
cat("------------------------------------------------------------------------------------\n")
cat("A análise GWR explora a variação espacial das relações. Com a transformação log1p, as interpretações são na escala logarítmica.\n")
cat("Inferências principais:\n\n")
vi_principal_nome <- vars_independentes_formula_nomes[1]
cat("  A. Não Estacionariedade Espacial:\n")
cat(paste0("     - Principal achado: identificação de não estacionariedade. Variação ampla nos coeficientes locais\n"))
cat(paste0("       (especialmente para '", vi_principal_nome, "') sugere que sua relação com '", var_dependente_formula_nome, "' não é constante no espaço.\n"))
cat("       Esta é a vantagem chave sobre modelos globais (OLS) que assumem uma relação constante.\n")
cat("     - Variação no R² Local também indica não estacionariedade: o poder explicativo do modelo difere espacialmente.\n\n")
cat("  B. Natureza da Relação Local (Escala Logarítmica):\n")
cat(paste0("     - Mapas de coeficientes locais (Bloco 9) visualizam *onde* a relação é positiva, negativa ou próxima de zero.\n"))
cat(paste0("       Um coeficiente local positivo para '", vi_principal_nome, "' indica que um aumento em '", vi_principal_nome, "' (que é log(1 + ocorrências de drogas))\n"))
cat(paste0("       está associado a um aumento em '", var_dependente_formula_nome, "' (que é log(1 + nº roubos)) naquela área específica.\n"))
cat("       A magnitude do coeficiente reflete a força dessa associação local na escala logarítmica.\n")
cat("     - Mapas de valores-t indicam *onde* as relações observadas são estatisticamente significativas, ou seja, improváveis de terem ocorrido ao acaso.\n\n")
cat(paste0("  C. Implicações Práticas (Exemplo para '",var_dependente_formula_nome,"' e '",vi_principal_nome,"'):\n"))
cat(paste0("     - Se o GWR mostra uma relação positiva forte e significativa em certas áreas ('hotspots' de '",var_dependente_formula_nome,"'),\n"))
cat(paste0("       isso sugere que fatores relacionados a '", vi_principal_nome, "' (na escala original, 'n_drogas') são particularmente relevantes\n"))
cat(paste0("       para explicar '",var_dependente_formula_nome,"' (na escala original, 'n_roubos') nessas localidades.\n"))
cat("       Intervenções direcionadas podem ser mais eficazes nessas áreas.\n")
cat(paste0("     - Em áreas com relação fraca, nula ou negativa, outros fatores não incluídos no modelo podem ser mais importantes para explicar '",var_dependente_formula_nome,"'.\n"))
cat(paste0("     - **Importante sobre interpretação de log-log:** Um coeficiente de, por exemplo, 0.5 para '", vi_principal_nome, "' significa que um aumento de 1% em (1 + n_drogas)\n"))
cat(paste0("       está associado a um aumento de aproximadamente 0.5% em (1 + n_roubos), localmente. Esta é uma interpretação de elasticidade.\n"))
cat("       Para interpretações mais diretas na escala original, pode ser necessário reverter a transformação dos valores preditos ou simular cenários.\n\n")
cat("  D. Limitações e Próximos Passos:\n")
cat("     - **Sensibilidade à Especificação:** GWR é sensível à escolha da largura de banda, kernel e forma funcional (transformações).\n")
cat("       Explore a sensibilidade dos resultados a essas escolhas.\n")
cat("     - **Multicolinearidade Local:** Pode instabilizar coeficientes locais, especialmente com múltiplas VIs. Verifique VIFs locais se aplicável.\n")
cat(paste0("     - **Complexidade do Modelo:** Este modelo usa uma VI transformada ('", vi_principal_nome, "'). Adicionar mais VIs pode enriquecer a análise,\n"))
cat("       mas também aumenta o risco de multicolinearidade e a complexidade da interpretação.\n")
cat("     - **Validação:** Compare os resultados com outros modelos espaciais ou não espaciais. Considere validação cruzada espacial.\n")
cat("     - **Análise de Resíduos:** (Ver Seção 5 abaixo para I de Moran Global dos Resíduos).\n") # Modificado para referenciar a Seção 5
cat("       Padrões nos resíduos podem indicar variáveis omitidas importantes ou problemas na especificação do modelo.\n\n")
cat("Interprete estes resultados no contexto da sua área de estudo, conhecimento teórico e dos dados. Os mapas gerados no Bloco 9 são essenciais para complementar este resumo textual.\n")
# --- INÍCIO DA SEÇÃO 5: ANÁLISE DE AUTOCORRELAÇÃO ESPACIAL DOS RESÍDUOS ---
cat("\n## 5. Análise de Autocorrelação Espacial dos Resíduos (I de Moran Global) ##\n")
cat("--------------------------------------------------------------------------------\n")
cat("Verificar a autocorrelação espacial nos resíduos do GWR é importante.\n")
cat("Resíduos espacialmente correlacionados podem indicar que o modelo GWR não capturou toda a estrutura espacial,\n")
cat("ou que variáveis espaciais importantes foram omitidas.\n\n")
if ("residual" %in% names(resultados_gwr_poligonos_sf) && nrow(resultados_gwr_poligonos_sf) > 0) {
residuos_gwr <- resultados_gwr_poligonos_sf$residual
message("\nCalculando vizinhança para o teste de Moran dos resíduos...")
vizinhos_listw <- NULL
tryCatch({
nb_queen <- spdep::poly2nb(resultados_gwr_poligonos_sf, queen = TRUE)
num_sem_vizinhos <- sum(card(nb_queen) == 0)
if (num_sem_vizinhos > 0) {
message(paste("Aviso: Encontrados", num_sem_vizinhos, "polígonos sem vizinhos (ilhas) para o teste de Moran."))
}
vizinhos_listw <- spdep::nb2listw(nb_queen, style = "W", zero.policy = TRUE)
message("Matriz de pesos espaciais (listw) para resíduos criada com sucesso.")
}, error = function(e_nb) {
message(paste("Erro ao criar a matriz de vizinhança para os resíduos:", e_nb$message))
cat("Não foi possível calcular o I de Moran para os resíduos devido a erro na criação da matriz de vizinhança.\n")
})
if (!is.null(vizinhos_listw)) {
message("Calculando o I de Moran Global para os resíduos do GWR...")
teste_moran_residuos <- NULL
tryCatch({
# Verificar se há NAs nos resíduos
if(any(is.na(residuos_gwr))){
message(paste("Aviso:", sum(is.na(residuos_gwr)), "valores NA encontrados nos resíduos. Tentando removê-los para o teste de Moran."))
}
# O moran.test lida com NAs através do na.action, mas é bom estar ciente.
# Se zero.policy=TRUE, ele pode lidar com o subsetting implícito devido a NAs.
if(length(na.omit(residuos_gwr)) > 2) {
teste_moran_residuos <- spdep::moran.test(residuos_gwr,
listw = vizinhos_listw,
zero.policy = TRUE,
na.action = na.omit,
alternative = "greater")
cat("\n--- Resultados do Teste I de Moran Global para Resíduos do GWR ---\n")
cat(paste("I de Moran Observado:", round(teste_moran_residuos$estimate[1], 4), "\n"))
cat(paste("I de Moran Esperado (sob H0 de não autocorrelação):", round(teste_moran_residuos$estimate[2], 4), "\n"))
cat(paste("Desvio Padrão do I de Moran:", round(teste_moran_residuos$estimate[3], 4), "\n"))
cat(paste("Estatística Z:", round(teste_moran_residuos$statistic, 2), "\n"))
cat(paste("Valor-p:", format.pval(teste_moran_residuos$p.value, digits = 4, eps = 0.0001), "\n"))
cat(paste("Hipótese Alternativa:", teste_moran_residuos$alternative, "(autocorrelação espacial positiva)\n"))
cat("\nInterpretação do I de Moran para Resíduos:\n")
if (teste_moran_residuos$p.value < 0.05) {
cat("  O valor-p é menor que 0.05, sugerindo a rejeição da hipótese nula de ausência de autocorrelação espacial.\n")
if (teste_moran_residuos$estimate[1] > teste_moran_residuos$estimate[2]) {
cat("  Há evidência de AUTOCORRELAÇÃO ESPACIAL POSITIVA nos resíduos do GWR (valores de resíduos similares tendem a agrupar-se espacialmente).\n")
cat("  Isso pode indicar que o modelo GWR não capturou completamente a estrutura espacial nos dados ou que há variáveis espaciais omitidas.\n")
} else { # Embora testemos por 'greater', é bom ter a lógica caso mudemos para 'two.sided'
cat("  Há evidência de AUTOCORRELAÇÃO ESPACIAL NEGATIVA nos resíduos do GWR (valores de resíduos dissimilares tendem a agrupar-se - menos comum).\n")
}
} else {
cat("  O valor-p é maior ou igual a 0.05. Não há evidência estatística suficiente para rejeitar a hipótese nula de ausência de autocorrelação espacial nos resíduos.\n")
cat("  Isso sugere que os resíduos do modelo GWR são espacialmente aleatórios, o que é um bom sinal para a adequação do modelo em termos de captura da estrutura espacial.\n")
}
} else {
cat("Não foi possível calcular o I de Moran: número insuficiente de resíduos válidos (após remover NAs) para o teste.\n")
}
}, error = function(e_moran) {
message(paste("Erro ao calcular o I de Moran para os resíduos:", e_moran$message))
cat("Não foi possível calcular o I de Moran para os resíduos.\n")
})
}
} else {
cat("Coluna 'residual' não encontrada em 'resultados_gwr_poligonos_sf' ou o objeto está vazio.\n")
cat("A análise de autocorrelação espacial dos resíduos não pode ser realizada.\n")
}
# --- FIM DA SEÇÃO 5 ---
} # Fecha o else principal do Bloco 10
cat("\n--- Fim do Bloco 10: Resumo GWR (com variáveis transformadas log1p e Análise de Resíduos) ---\n")
# ```
# (O script continua com o Bloco 11: Salvar Resultados)
# ...
# --- Bloco 11: Salvar Resultados Finais em GeoPackage ---
cat("\n\n--- Bloco 11: Salvar Resultados Finais em GeoPackage ---\n")
# Verificar se a biblioteca 'sf' está carregada, pois é necessária para st_write.
if (!requireNamespace("sf", quietly = TRUE)) {
cat("AVISO: O pacote 'sf' não está instalado. Não é possível salvar em GeoPackage.\n")
cat("Por favor, instale o pacote com: install.packages('sf')\n")
} else if (!exists("resultados_gwr_poligonos_sf") || is.null(resultados_gwr_poligonos_sf) || nrow(resultados_gwr_poligonos_sf) == 0) {
cat("AVISO: O objeto 'resultados_gwr_poligonos_sf' não foi encontrado ou está vazio.\n")
cat("Nenhum resultado para salvar em GeoPackage. Verifique as etapas anteriores do script.\n")
} else {
# Definir o caminho completo e o nome do arquivo GeoPackage de saída
caminho_diretorio_saida <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/h3/resultados_gwr/"
nome_base_arquivo <- "resultados_analise_gwr_final.gpkg" # Você pode alterar o nome do arquivo se desejar
nome_arquivo_gpkg_completo <- file.path(caminho_diretorio_saida, nome_base_arquivo)
nome_camada_gpkg <- "gwr_coeficientes_locais" # Nome da camada dentro do GeoPackage
cat(paste("Tentando salvar os resultados GWR no arquivo GeoPackage em:", nome_arquivo_gpkg_completo, "\n"))
cat(paste("Nome da camada a ser criada:", nome_camada_gpkg, "\n"))
# Opcional: Verificar se o diretório de saída existe.
# Se não existir, você pode querer criá-lo com dir.create(caminho_diretorio_saida, recursive = TRUE, showWarnings = FALSE)
# ou simplesmente alertar o usuário. Por ora, vamos assumir que ele existe.
if (!dir.exists(caminho_diretorio_saida)) {
cat(paste("ALERTA: O diretório de saída especificado NÃO EXISTE:", caminho_diretorio_saida, "\n"))
cat("Por favor, crie o diretório manualmente ou ajuste o caminho no script.\n")
# Você pode optar por parar o script aqui se o diretório for crucial.
# stop("Diretório de saída não encontrado.")
}
tryCatch({
# Salvar o objeto sf (SpatialPolygonsDataFrame com resultados GWR) em um arquivo GeoPackage.
sf::st_write(obj = resultados_gwr_poligonos_sf,
dsn = nome_arquivo_gpkg_completo, # Usar o caminho completo
layer = nome_camada_gpkg,
driver = "GPKG",        # Especifica o driver para GeoPackage
delete_layer = TRUE,    # Sobrescreve a camada se já existir
# Use delete_dsn = TRUE para sobrescrever o arquivo inteiro
quiet = FALSE)          # Mostra mensagens do processo
cat(paste("\nResultados GWR salvos com sucesso em:", nome_arquivo_gpkg_completo, "como camada:", nome_camada_gpkg, "\n"))
cat("Você pode abrir este arquivo em um software GIS (QGIS, ArcGIS, etc.) para visualizar os mapas de coeficientes, valores-t e R² local.\n")
}, error = function(e) {
cat("\nERRO AO SALVAR EM GEOPACKAGE:\n")
cat(paste("Mensagem de erro:", e$message, "\n"))
cat(paste("Verifique se o caminho do diretório está correto, se o diretório existe e se você tem permissão de escrita nele:\n", caminho_diretorio_saida, "\n"))
cat("Certifique-se também de que o pacote 'sf' está funcionando corretamente.\n")
})
}
cat("\n--- Fim do Bloco 11: Salvar Resultados ---\n")
# --- Adicione estas linhas para depuração ---
print("--- Início da Inspeção de Diagnósticos GWR ---")
print("Estrutura completa de gwr_resultado_lista$GW.diagnostic:")
print(str(gwr_resultado_lista$GW.diagnostic))
print("Conteúdo de gwr_resultado_lista$GW.diagnostic:")
print(gwr_resultado_lista$GW.diagnostic) # Exibe a lista completa
# Inspecione os elementos específicos que estão causando erro ou são suspeitos:
print(paste("Valor de diagnostics$ENP:", diagnostics$ENP))
print(paste("Classe de diagnostics$ENP:", class(diagnostics$ENP)))
print(paste("É numérico diagnostics$ENP?", is.numeric(diagnostics$ENP)))
print(paste("É NA diagnostics$ENP?", is.na(diagnostics$ENP)))
print(paste("É NULL diagnostics$ENP?", is.null(diagnostics$ENP)))
print(paste("É finito diagnostics$ENP?", is.finite(diagnostics$ENP))) # Verifica NA, NaN, Inf
print(paste("Valor de diagnostics$edf:", diagnostics$edf))
print(paste("Classe de diagnostics$edf:", class(diagnostics$edf)))
print(paste("É numérico diagnostics$edf?", is.numeric(diagnostics$edf)))
print(paste("É NA diagnostics$edf?", is.na(diagnostics$edf)))
print(paste("É NULL diagnostics$edf?", is.null(diagnostics$edf)))
print(paste("É finito diagnostics$edf?", is.finite(diagnostics$edf)))
print(paste("Valor de diagnostics$sigma:", diagnostics$sigma))
print(paste("Classe de diagnostics$sigma:", class(diagnostics$sigma)))
print(paste("É numérico diagnostics$sigma?", is.numeric(diagnostics$sigma)))
print(paste("É NA diagnostics$sigma?", is.na(diagnostics$sigma)))
print(paste("É NULL diagnostics$sigma?", is.null(diagnostics$sigma)))
print(paste("É finito diagnostics$sigma?", is.finite(diagnostics$sigma)))
print(paste("Valor de diagnostics$RSS:", diagnostics$RSS))
print(paste("Classe de diagnostics$RSS:", class(diagnostics$RSS)))
print(paste("É numérico diagnostics$RSS?", is.numeric(diagnostics$RSS)))
print(paste("É NA diagnostics$RSS?", is.na(diagnostics$RSS)))
print(paste("É NULL diagnostics$RSS?", is.null(diagnostics$RSS)))
print(paste("É finito diagnostics$RSS?", is.finite(diagnostics$RSS)))
print("--- Fim da Inspeção de Diagnósticos GWR ---")
# --- Fim das linhas de depuração ---
# Dentro do Bloco 10, na seção "## 2. Diagnósticos Globais do Modelo GWR ##"
if (!is.null(gwr_resultado_lista$GW.diagnostic)) {
diagnostics <- gwr_resultado_lista$GW.diagnostic
# Função auxiliar para verificar e imprimir diagnósticos
print_diagnostic <- function(value, name, description) {
if (!is.null(value) && is.numeric(value) && is.finite(value)) { # is.finite() verifica NA, NaN, Inf
cat(paste0(name, ": ", round(value, 2), "\n"))
cat(paste0("  -> ", description, "\n"))
} else {
cat(paste0(name, ": Não disponível ou não numérico (Valor: ", as.character(value), ").\n"))
}
}
# AICc
print_diagnostic(diagnostics$AICc, "AICc (Akaike Information Criterion Corrigido)", "O AICc é uma métrica de qualidade de ajuste que penaliza modelos com mais parâmetros...")
# ENP
print_diagnostic(diagnostics$ENP, "ENP (Effective Number of Parameters)", "O ENP reflete a complexidade do modelo GWR, indicando o número efetivo de parâmetros...")
# EDF
print_diagnostic(diagnostics$edf, "EDF (Effective Degrees of Freedom)", "Similar ao ENP, o EDF é usado em cálculos estatísticos e representa os graus de liberdade efetivos do modelo...")
# Sigma
print_diagnostic(diagnostics$sigma, "Sigma (Estimativa do Desvio Padrão dos Resíduos)", "O sigma representa o desvio padrão dos resíduos, uma medida da dispersão dos erros do modelo...")
# RSS
print_diagnostic(diagnostics$RSS, "RSS (Residual Sum of Squares)", "O RSS mede a soma das diferenças quadráticas entre os valores observados e previstos, indicando a variação não explicada pelo modelo...")
# Cálculo do R² Global (manter como está, pois já tem uma verificação if)
if ("y" %in% names(gwr_resultado_lista$SDF) && "yhat" %in% names(gwr_resultado_lista$SDF)) {
# ... (código do R² global) ...
} else {
cat("R² Global (Calculado): Não foi possível calcular pois 'y' ou 'yhat' não estão presentes no SDF do GWR.\n")
}
} else {
cat("Diagnósticos globais (gwr_resultado_lista$GW.diagnostic) não disponíveis ou a estrutura está vazia.\n")
}
# 1. Carregar bibliotecas necessárias
message("Carregando bibliotecas essenciais para análise espacial e GWR...")
library(sf) # Para manipulação de dados espaciais vetoriais (Simple Features)
library(GWmodel) # Para Geographically Weighted Regression (GWR) e funções relacionadas
library(dplyr) # Para manipulação e transformação de dados
library(ggplot2) # Para visualização e criação de mapas
library(sp) # Necessário para o pacote GWmodel, que utiliza objetos Spatial*DataFrame
library(spdep) # Para testes de autocorrelação espacial como o I de Moran <--- ADICIONADO
message("Bibliotecas carregadas com sucesso.")
# --- INÍCIO: Definição dos caminhos dos arquivos ---
# É uma boa prática centralizar a definição de caminhos para facilitar a manutenção
# e a portabilidade do script. Considere usar 'here::here()' para caminhos relativos
# ao projeto, o que torna o script mais robusto em diferentes ambientes.
# Exemplo: path_base <- here::here("data", "shp")
# path_roubos <- file.path(path_base, "roubo.shp")
# path_drogas <- file.path(path_base, "drogas.shp")
# path_area_estudo <- file.path(path_base, "centro_expandido", "centro_expandido_dissolve.shp")
path_roubos <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/roubo.shp"
path_drogas <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/drogas.shp"
path_area_estudo <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/centro_expandido/centro_expandido_dissolve.shp"
# --- FIM: Definição dos caminhos dos arquivos ---
# 2. Ler os arquivos shapefile
message("Iniciando a leitura dos arquivos shapefile...")
tryCatch({
# st_read com quiet = TRUE suprime mensagens de progresso, mantendo o output limpo.
pontos_roubo <- st_read(path_roubos, quiet = TRUE)
pontos_drogas <- st_read(path_drogas, quiet = TRUE)
area_estudo <- st_read(path_area_estudo, quiet = TRUE)
}, error = function(e) {
# Em caso de erro na leitura (e.g., arquivo não encontrado, corrompido),
# o script é interrompido com uma mensagem clara.
stop("Erro crítico ao ler um ou mais arquivos shapefile. Verifique os caminhos e a integridade dos arquivos: ", e$message)
})
# 1. Carregar bibliotecas necessárias
message("Carregando bibliotecas essenciais para análise espacial e GWR...")
library(sf) # Para manipulação de dados espaciais vetoriais (Simple Features)
library(GWmodel) # Para Geographically Weighted Regression (GWR) e funções relacionadas
library(dplyr) # Para manipulação e transformação de dados
library(ggplot2) # Para visualização e criação de mapas
library(sp) # Necessário para o pacote GWmodel, que utiliza objetos Spatial*DataFrame
library(spdep) # Para testes de autocorrelação espacial como o I de Moran <--- ADICIONADO
message("Bibliotecas carregadas com sucesso.")
# --- INÍCIO: Definição dos caminhos dos arquivos ---
# É uma boa prática centralizar a definição de caminhos para facilitar a manutenção
# e a portabilidade do script. Considere usar 'here::here()' para caminhos relativos
# ao projeto, o que torna o script mais robusto em diferentes ambientes.
# Exemplo: path_base <- here::here("data", "shp")
# path_roubos <- file.path(path_base, "roubo.shp")
# path_drogas <- file.path(path_base, "drogas.shp")
# path_area_estudo <- file.path(path_base, "centro_expandido", "centro_expandido_dissolve.shp")
path_roubos <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/roubo.shp"
path_drogas <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/drogas.shp"
path_area_estudo <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/centro_expandido/centro_expandido_dissolve.shp"
# --- FIM: Definição dos caminhos dos arquivos ---
# 2. Ler os arquivos shapefile
message("Iniciando a leitura dos arquivos shapefile...")
tryCatch({
# st_read com quiet = TRUE suprime mensagens de progresso, mantendo o output limpo.
pontos_roubo <- st_read(path_roubos, quiet = TRUE)
pontos_drogas <- st_read(path_drogas, quiet = TRUE)
area_estudo <- st_read(path_area_estudo, quiet = TRUE)
}, error = function(e) {
# Em caso de erro na leitura (e.g., arquivo não encontrado, corrompido),
# o script é interrompido com uma mensagem clara.
stop("Erro crítico ao ler um ou mais arquivos shapefile. Verifique os caminhos e a integridade dos arquivos: ", e$message)
})
# 1. Carregar bibliotecas necessárias
message("Carregando bibliotecas essenciais para análise espacial e GWR...")
library(sf) # Para manipulação de dados espaciais vetoriais (Simple Features)
library(GWmodel) # Para Geographically Weighted Regression (GWR) e funções relacionadas
library(dplyr) # Para manipulação e transformação de dados
library(ggplot2) # Para visualização e criação de mapas
library(sp) # Necessário para o pacote GWmodel, que utiliza objetos Spatial*DataFrame
library(spdep) # Para testes de autocorrelação espacial como o I de Moran <--- ADICIONADO
message("Bibliotecas carregadas com sucesso.")
# --- INÍCIO: Definição dos caminhos dos arquivos ---
# É uma boa prática centralizar a definição de caminhos para facilitar a manutenção
# e a portabilidade do script. Considere usar 'here::here()' para caminhos relativos
# ao projeto, o que torna o script mais robusto em diferentes ambientes.
# Exemplo: path_base <- here::here("data", "shp")
# path_roubos <- file.path(path_base, "roubo.shp")
# path_drogas <- file.path(path_base, "drogas.shp")
# path_area_estudo <- file.path(path_base, "centro_expandido", "centro_expandido_dissolve.shp")
path_roubos <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/roubo.shp"
path_drogas <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/drogas.shp"
path_area_estudo <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/centro_expandido/centro_expandido_dissolve.shp"
# --- FIM: Definição dos caminhos dos arquivos ---
# 2. Ler os arquivos shapefile
message("Iniciando a leitura dos arquivos shapefile...")
tryCatch({
# st_read com quiet = TRUE suprime mensagens de progresso, mantendo o output limpo.
pontos_roubo <- st_read(path_roubos, quiet = TRUE)
pontos_drogas <- st_read(path_drogas, quiet = TRUE)
area_estudo <- st_read(path_area_estudo, quiet = TRUE)
}, error = function(e) {
# Em caso de erro na leitura (e.g., arquivo não encontrado, corrompido),
# o script é interrompido com uma mensagem clara.
stop("Erro crítico ao ler um ou mais arquivos shapefile. Verifique os caminhos e a integridade dos arquivos: ", e$message)
})
# 1. Carregar bibliotecas necessárias
library(sf)
library(GWmodel)
library(dplyr)
library(ggplot2)
library(sp)
# --- INÍCIO: Definição dos caminhos dos arquivos ---
path_roubos <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/roubo.shp"
path_drogas <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/drogas.shp"
path_area_estudo <- "C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/mba/mba_arrumado/nova abordagem/shp/centro_expandido/centro_expandido_dissolve.shp"
# --- FIM: Definição dos caminhos dos arquivos ---
# 2. Ler os arquivos shapefile
tryCatch({
pontos_roubo <- st_read(path_roubos, quiet = TRUE)
pontos_drogas <- st_read(path_drogas, quiet = TRUE)
area_estudo <- st_read(path_area_estudo, quiet = TRUE)
}, error = function(e) {
stop("Erro ao ler um ou mais arquivos shapefile: ", e$message)
})
install.packages("rgdal")
install.packages("dplyr")
install.packages("sf")
# Carregar os pacotes (opcional, mas comum após a instalação)
library(dplyr)
library(sf)
library(tmap)
library(plotly)
library(ggplot2)
library(cowplot)
library(tibble)
library(stringi)
library(corrplot)
library(readxl)
library(spdep)
library(kableExtra)
#carregando shapefile da cidade de São Paulo
shp_saopaulo <- readOGR("/kaggle/input/arquivos-github/shapefile_municipio")
# Carregando shapefile da cidade de São Paulo usando 'sf'
shp_saopaulo_sf <- sf::st_read("/kaggle/input/arquivos-github/shapefile_municipio")
# Carregando shapefile da cidade de São Paulo usando 'sf'
shp_saopaulo_sf <- sf::st_read("C:\Users\Rodrigo - H2R\OneDrive - Conhecimento e Ação em Marketing Ltda\Documentos\testes\analise_imovel\dados\SP_Municipios_2024\SP_Municipios_2024.shp")
# Carregando shapefile da cidade de São Paulo usando 'sf'
shp_saopaulo_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/SP_Municipios_2024/SP_Municipios_2024.shp")
# Verificando o sistema de coordenadas (CRS) atual do shapefile
shp_saopaulo_sf_wgs84 <- sf::st_transform(shp_saopaulo_sf, crs = 4326) # 4326 é o código EPSG para WGS84
# Se o CRS já estiver em WGS84 (EPSG:4326), você não precisa da linha acima.
# Você pode verificar com sf::st_crs(shp_saopaulo_sf)
sf_shp <- sf_shp %>% mutate(NOME_DIST = gsub(" ", "-", sf_shp$NOME_DIST) %>% tolower())
sf_shp <- sf_shp %>% mutate(NOME_DIST = gsub(" ", "-", sf_shp$NOME_DIST) %>% tolower())
# Carregando shapefile da cidade de São Paulo usando 'sf'
shp_saopaulo_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/SP_Municipios_2024/SP_Municipios_2024.shp")
#Transformando o shapefile para o Datum WGS84:
shp_long_lat <- spTransform(shp_saopaulo, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# Carregando shapefile da cidade de São Paulo usando 'sf'
shp_saopaulo_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/SP_Municipios_2024/SP_Municipios_2024.shp")
#Transformando o shapefile para o Datum WGS84:
shp_long_lat <- spTransform(shp_saopaulo, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# Carregando shapefile da cidade de São Paulo usando 'sf'
# O 'sf::st_read()' já carrega o shapefile como um objeto 'sf'.
shp_saopaulo_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/SP_Municipios_2024/SP_Municipios_2024.shp")
# ---
## Transformando o CRS para WGS84 (EPSG:4326)
# O pacote 'sf' usa 'st_transform()' para mudar o sistema de coordenadas.
# O CRS de origem do seu shapefile é 'SIRGAS 2000', o que é bom!
# 'st_transform()' cuida da projeção e do datum.
shp_saopaulo_sf_wgs84 <- sf::st_transform(shp_saopaulo_sf, crs = 4326)
# ---
## Padronizando os Nomes das Distritos
# Alterando o nome das distritos (NOME_DIST) para minúsculas e substituindo espaços por hífens.
# A operação 'mutate' do dplyr funciona perfeitamente com objetos 'sf'.
sf_shp_final <- shp_saopaulo_sf_wgs84 %>%
dplyr::mutate(NOME_DIST = tolower(gsub(" ", "-", NOME_DIST)))
# Verifique os nomes das colunas no seu objeto sf
names(shp_saopaulo_sf_wgs84)
# Carregando shapefile da cidade de São Paulo usando 'sf'
# O 'sf::st_read()' já carrega o shapefile como um objeto 'sf'.
shp_saopaulo_sf <- sf::st_read(r::"C:\Users\Rodrigo - H2R\OneDrive - Conhecimento e Ação em Marketing Ltda\Documentos\testes\analise_imovel\dados\Bairros_Distritos_CidadeSP\LAYER_DISTRITO\DEINFO_DISTRITO.shp")
# Carregando shapefile da cidade de São Paulo usando 'sf'
# O 'sf::st_read()' já carrega o shapefile como um objeto 'sf'.
shp_saopaulo_sf <- sf::st_read("C:\\Users\\Rodrigo - H2R\\OneDrive - Conhecimento e Ação em Marketing Ltda\\Documentos\\testes\\analise_imovel\\dados\\Bairros_Distritos_CidadeSP\\LAYER_DISTRITO\\DEINFO_DISTRITO.shp")
# ---
## Transformando o CRS para WGS84 (EPSG:4326)
# O pacote 'sf' usa 'st_transform()' para mudar o sistema de coordenadas.
# O CRS de origem do seu shapefile é 'SIRGAS 2000', o que é bom!
# 'st_transform()' cuida da projeção e do datum.
shp_saopaulo_sf_wgs84 <- sf::st_transform(shp_saopaulo_sf, crs = 4326)
# Alternativamente, para ver os dados como uma tabela normal (sem a geometria)
# head(sf::st_drop_geometry(shp_saopaulo_sf_wgs84))
# Verifique os nomes das colunas no seu objeto sf
names(shp_saopaulo_sf_wgs84)
# ---
## Padronizando os Nomes das Distritos
# Alterando o nome das distritos (NOME_DIST) para minúsculas e substituindo espaços por hífens.
# A operação 'mutate' do dplyr funciona perfeitamente com objetos 'sf'.
sf_shp_final <- shp_saopaulo_sf_wgs84 %>%
dplyr::mutate(NOME_DIST = tolower(gsub(" ", "-", NOME_DIST)))
# Agora, 'sf_shp_final' é o seu objeto 'sf' pronto para uso,
# com o CRS transformado e os nomes dos distritos padronizados.
#carregando objeto sp do metrô de São Paulo
sp_metro_utm <- readOGR("C:\\Users\Rodrigo - H2R\\OneDrive - Conhecimento e Ação em Marketing Ltda\\Documentos\\testes\\analise_imovel\\dados\\estacao_metro.gpkg")
#carregando objeto sp do metrô de São Paulo
sp_metro_utm <- readOGR("C:\\Users\Rodrigo - H2R\\OneDrive - Conhecimento e Ação em Marketing Ltda\\Documentos\\testes\\analise_imovel\\dados\\estacao_metro.gpkg")
#carregando objeto sp do metrô de São Paulo
sp_metro_utm <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/estacao_metro.gpkg")
#alterando datum para utm
proj4string(sp_metro_utm) <- CRS("+init=epsg:22523")
#carregando objeto sp do metrô de São Paulo
sp_metro_utm <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/estacao_metro.gpkg")
#alterando datum para utm
proj4string(sp_metro_utm) <- CRS("+init=epsg:22523")
# Carregando objeto sf do metrô de São Paulo
sp_metro_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/estacao_metro.gpkg")
# ---
# Se você precisa que o objeto esteja no CRS UTM WGS 84 / Zone 23S (EPSG:22523):
# Utilize st_transform para reprojetar o objeto.
# Não é necessário usar proj4string ou CRS() com objetos sf para isso.
sp_metro_utm <- sf::st_transform(sp_metro_sf, crs = 22523)
# ---
sp_metro_geod <- sf::st_transform(sp_metro_sf, crs = 4326)
# Para verificar o CRS atual de qualquer objeto sf:
# print(sf::st_crs(sp_metro_sf))
# print(sf::st_crs(sp_metro_utm))
# print(sf::st_crs(sp_metro_geod))
#Data frame auxiliar com as regiões de São Paulo para pulverizar a busca de dados pela malha do município;
regioes <- data.frame("distrito" = idh_sp$DISTRITO,
"zona" = idh_sp$REGIAO8)
# Carregar os pacotes (opcional, mas comum após a instalação)
library(dplyr)
library(sf)
library(tmap)
library(plotly)
library(ggplot2)
library(cowplot)
library(tibble)
library(stringi)
library(corrplot)
library(readxl)
library(spdep)
library(kableExtra)
# Carregando shapefile da cidade de São Paulo usando 'sf'
# O 'sf::st_read()' já carrega o shapefile como um objeto 'sf'.
shp_saopaulo_sf <- sf::st_read("C:\\Users\\Rodrigo - H2R\\OneDrive - Conhecimento e Ação em Marketing Ltda\\Documentos\\testes\\analise_imovel\\dados\\Bairros_Distritos_CidadeSP\\LAYER_DISTRITO\\DEINFO_DISTRITO.shp")
# ---
## Transformando o CRS para WGS84 (EPSG:4326)
# O pacote 'sf' usa 'st_transform()' para mudar o sistema de coordenadas.
# O CRS de origem do seu shapefile é 'SIRGAS 2000', o que é bom!
# 'st_transform()' cuida da projeção e do datum.
shp_saopaulo_sf_wgs84 <- sf::st_transform(shp_saopaulo_sf, crs = 4326)
# Alternativamente, para ver os dados como uma tabela normal (sem a geometria)
# head(sf::st_drop_geometry(shp_saopaulo_sf_wgs84))
# Verifique os nomes das colunas no seu objeto sf
names(shp_saopaulo_sf_wgs84)
# ---
## Padronizando os Nomes das Distritos
# Alterando o nome das distritos (NOME_DIST) para minúsculas e substituindo espaços por hífens.
# A operação 'mutate' do dplyr funciona perfeitamente com objetos 'sf'.
sf_shp_final <- shp_saopaulo_sf_wgs84 %>%
dplyr::mutate(NOME_DIST = tolower(gsub(" ", "-", NOME_DIST)))
# Agora, 'sf_shp_final' é o seu objeto 'sf' pronto para uso,
# com o CRS transformado e os nomes dos distritos padronizados.
# Carregando objeto sf do metrô de São Paulo
sp_metro_sf <- sf::st_read("C:/Users/Rodrigo - H2R/OneDrive - Conhecimento e Ação em Marketing Ltda/Documentos/testes/analise_imovel/dados/estacao_metro.gpkg")
# ---
sp_metro_utm <- sf::st_transform(sp_metro_sf, crs = 22523)
# ---
sp_metro_geod <- sf::st_transform(sp_metro_sf, crs = 4326)
# Para verificar o CRS atual de qualquer objeto sf:
# print(sf::st_crs(sp_metro_sf))
# print(sf::st_crs(sp_metro_utm))
# print(sf::st_crs(sp_metro_geod))
#Data frame auxiliar com as regiões de São Paulo para pulverizar a busca de dados pela malha do município;
regioes <- data.frame("distrito" = idh_sp$DISTRITO,
"zona" = idh_sp$REGIAO8)
#Base de dados com índices sociais e econômicos por distrito de São Paulo. Fonte: Geosampa
idh_sp <- read_excel("/kaggle/input/arquivos-github/idh_sp.xls", sheet = "dados")
